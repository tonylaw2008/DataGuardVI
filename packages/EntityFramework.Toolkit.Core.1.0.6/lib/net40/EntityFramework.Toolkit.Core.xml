<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.Toolkit.Core</name>
    </assembly>
    <members>
        <member name="T:EntityFramework.Toolkit.Auditing.AuditEntity">
            <summary>
                Base class for audit entities.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.AuditEntity.AuditDate">
            <summary>
                Gets or sets the DateTime this audit entity was created.
                Will be automatically set by AuditDbContext on SaveChanges.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.AuditEntity.AuditUser">
            <summary>
                Gets or sets the user who updated the entity
                Will be automatically set by AuditDbContext on SaveChanges.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.AuditEntity.AuditType">
            <summary>
                Gets or sets the type of audit. 0 for update, 1 for deletion.
                Will be automatically set by AuditDbContext on SaveChanges.
            </summary>
        </member>
        <member name="T:EntityFramework.Toolkit.Auditing.AuditEntityState">
            <summary>
                Describes the state of an audit entity.
            </summary>
        </member>
        <member name="T:EntityFramework.Toolkit.Auditing.IAuditEntity`1">
            <summary>
                Any class used for auditing an entity must implement this inteface.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.IAuditEntity`1.AuditId">
            <summary>
            The primary key of an audit entry.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.IAuditEntity.AuditDate">
            <summary>
                Gets or sets the DateTime this audit entity was created.
            </summary>
            <remarks>
                Will be automatically set by AuditDbContext on SaveChanges.
            </remarks>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.IAuditEntity.AuditUser">
            <summary>
                Gets or sets the user who updated the entity
            </summary>
            <remarks>
                Will be automatically set by AuditDbContext on SaveChanges.
            </remarks>
        </member>
        <member name="P:EntityFramework.Toolkit.Auditing.IAuditEntity.AuditType">
            <summary>
                Gets or sets the type of audit.
            </summary>
            <remarks>
                Will be automatically set by AuditDbContext on SaveChanges.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Change.#ctor(System.Object,EntityFramework.Toolkit.ChangeState,System.Collections.Generic.IEnumerable{EntityFramework.Toolkit.PropertyChangeInfo})">
            <summary>
                Initializes a new instance of the <see cref="T:EntityFramework.Toolkit.Change" /> class.
            </summary>
            <param name="changedEntity">
                The changed object.
            </param>
            <param name="changedProperties">
                The List of the properties that have been changed.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the specified <paramref name="changedEntity" /> is null.
            </exception>
            .
            <exception cref="T:System.ArgumentNullException">
                Thrown if the specified <paramref name="changedProperties" /> is null.
            </exception>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.ReadOnlyRepositoryExtensions.Any``1(EntityFramework.Toolkit.IReadOnlyRepository{``0},System.Object[])">
            <summary>
                Indicates whether an entity with the given primary key value exists.
            </summary>
            <param name="ids">The primary keys of the entity to be found.</param>
            <returns>true, if an entity with given primary key exists; otherwise, false.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.ReadOnlyRepositoryExtensions.Any``1(EntityFramework.Toolkit.IReadOnlyRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                Indicates whether an entity which matches the given predicate exists.
            </summary>
            <param name="predicate">The predicate to filter the entity.</param>
            <returns>true, if an entity exists for given predicate; otherwise, false.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.GenericRepositoryExtensions.RemoveById``1(EntityFramework.Toolkit.IGenericRepository{``0},System.Object[])">
            <summary>
                Marks the the entity with the given primary key as Deleted such that it will be deleted from the database when
                SaveChanges is called. Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
            <returns> The entity that has been removed.</returns>
            <remarks>
                Note that if the entity exists in the context in the Added state, then this method
                will cause it to be detached from the context.  This is because an Added entity is assumed not to
                exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.GenericRepositoryExtensions.RemoveRange``1(EntityFramework.Toolkit.IGenericRepository{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes the given collection of entities from the context underlying the set with each entity being put into
                the Deleted state such that it will be deleted from the database when SaveChanges is called.
            </summary>
            <param name="entities">The collection of entities to delete.</param>
            <returns>The collection of entities.</returns>
            <remarks>
                Note that if <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled" /> is
                set to true (which is the default), then DetectChanges will be called once before delete any entities and will not be called
                again. This means that in some situations RemoveRange may perform significantly better than calling
                Remove multiple times would do.
                Note that if any entity exists in the context in the Added state, then this method
                will cause it to be detached from the context.  This is because an Added entity is assumed not to
                exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.Extensions.GenericRepositoryExtensions.RemoveAll``1(EntityFramework.Toolkit.IGenericRepository{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Removes all entities that match the conditions defined by the given predicate.</summary>
            <returns>The removed entities.</returns>
            <param name="predicate">The expression that defines the conditions of the elements to remove.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="predicate" /> is null.
            </exception>
        </member>
        <member name="P:EntityFramework.Toolkit.IAuditContext.AuditEnabled">
            <summary>
                Specifies if the auditing feature is enabled.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IAuditContext.SaveChanges(System.String)">
            <summary>
                Saves all changes made in this context to the underlying database.
            </summary>
            <returns>The number of objects written to the underlying database.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="T:EntityFramework.Toolkit.IChange">
            <summary>
                Interface for changed objects and object properties.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.IChange.ChangedEntity">
            <summary>
                Gets the changed object.
            </summary>
            <value>
                See <see cref="T:System.Object" />.
            </value>
        </member>
        <member name="P:EntityFramework.Toolkit.IChange.ChangedProperties">
            <summary>
                Gets the names of the properties that have been changed.
            </summary>
            <value>
                The names of the properties that have been changed.
            </value>
        </member>
        <member name="P:EntityFramework.Toolkit.IChange.State">
            <summary>
                Gets the state of the changed object.
            </summary>
            <value>
                See <see cref="!:EntityState" />.
            </value>
        </member>
        <member name="M:EntityFramework.Toolkit.IContext.ResetDatabase">
            <summary>
                Drops and recreates the underlying database.
                USE WITH CARE!
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IContext.DropDatabase">
            <summary>
                Drops the underlying database.
                USE WITH CARE!
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IContext.Edit``1(``0)">
            <summary>
                Updates the given entity.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IContext.Edit``1(``0,``0)">
            <summary>
                Updates the given attached <paramref name="originalEntity" /> with the new entity <paramref name="updateEntity" />.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IContext.UndoChanges``1(``0)">
            <summary>
                Reverts changes in <paramref name="entity" />.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IContext.ModifyProperties``1(``0,System.String[])">
            <summary>
                Modifies the properties with <paramref name="propertyNames" /> of given entity <paramref name="entity" />.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IContext.SaveChanges">
            <summary>
                Saves all changes made in this context to the underlying database.
            </summary>
            <returns>The number of objects written to the underlying database.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
        </member>
        <member name="M:EntityFramework.Toolkit.IDataSeed.GetAddOrUpdateExpression">
            <summary>
            Gets the expression which checks if there are existing seed entries.
            Depending on the result, the seed entry is added or updated.
            </summary>
        </member>
        <member name="P:EntityFramework.Toolkit.IDataSeed.EntityType">
            <summary>
            The type of the entity for which this seed is used.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IDataSeed.GetAllObjects">
            <summary>
            The seed data as a list of objects.
            </summary>
        </member>
        <member name="T:EntityFramework.Toolkit.IGenericRepository`1">
            <summary>
                Abstraction of a generic repository.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.Add(`0)">
            <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
            <param name="entity">The entity to add.</param>
            <returns> The entity.</returns>
            <remarks>
                Note that entities that are already in the context in some other state will have their state set
                to Added. Add is a no-op if the entity is already in the context in the Added state.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.AddOrUpdate(`0)">
            <summary>
                Adds or updates the given entity. If the entity is existing, it's going to be updated with the new values.
                If the entity does not exist in the context, it's going to be created.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.Update(`0)">
            <summary>
                Updates the given entity. This method checks if an entity exists before it tries to perform the update activity.
            </summary>
            <param name="entity">The entity to be updated in the database context.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.Update(`0,`0)">
            <summary>
                Updates the given entity. This method checks if an entity exists before it tries to perform the update activity.
            </summary>
            <param name="entity">The existing entity.</param>
            <param name="updateEntity">The update entity.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.Update``1(``0,``0)">
            <summary>
                Updates the given entity. This method checks if an entity exists before it tries to perform the update activity.
            </summary>
            <param name="entity">The existing entity.</param>
            <param name="updateEntity">The update entity.</param>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.UpdateProperties``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
            Update given properties in <paramref name="propertyExpressions"/> of given <paramref name="entity"/>.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.UpdateProperty``1(`0,System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Update given property in <paramref name="propertyExpression"/> of given <paramref name="entity"/> with <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IGenericRepository`1.Remove(`0)">
            <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns> The entity that has been removed.</returns>
            <remarks>
                Note that if the entity exists in the context in the Added state, then this method
                will cause it to be detached from the context.  This is because an Added entity is assumed not to
                exist in the database such that trying to delete it does not make sense.
            </remarks>
        </member>
        <member name="M:EntityFramework.Toolkit.IReadOnlyRepository`1.Get">
            <summary>
                Returns a collection of all entities in the context, or that can be queried from the
                database, of given type <typeparamref name="T" />. IQueryable enables database-spezific filtering.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IReadOnlyRepository`1.Query">
            <summary>
                Returns a collection of all entities in the context, or that can be queried from the
                database, of given type <typeparamref name="T" />.  IQueryableIncluding enables database-spezific filtering with extended include options.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IReadOnlyRepository`1.GetAll">
            <summary>
                Returns a collection of all entities in the context, or that can be queried from the
                database, of given type <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:EntityFramework.Toolkit.IReadOnlyRepository`1.FindById(System.Object[])">
            <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
            <param name="ids">The values of the primary key for the entity to be found. </param>
            <returns> The entity found, or null. </returns>
        </member>
        <member name="M:EntityFramework.Toolkit.IReadOnlyRepository`1.FindBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
                Finds entities with the given search predicate.
            </summary>
            <param name="predicate">The search predicate.</param>
            <returns>A collection of entities matching the search predicate.</returns>
        </member>
        <member name="M:EntityFramework.Toolkit.IWritableRepository.Save">
            <summary>
                Saves all changes made in this context to the underlying database.
            </summary>
            <returns>
                The set of changes written to the underlying database. This can include
                state entries for entities and/or relationships.
            </returns>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">
                An error occurred sending updates to the database.
            </exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
                A database command did not affect the expected number of rows. This usually indicates an optimistic
                concurrency violation; that is, a row has been changed in the database since it was queried.
            </exception>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
                The save was aborted because validation of entity property values failed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                An attempt was made to use unsupported behavior such as executing multiple asynchronous commands concurrently
                on the same context instance.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The context or connection have been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">
                Some error occurred attempting to process entities in the context either before or after sending commands
                to the database.
            </exception>
        </member>
        <member name="M:EntityFramework.Toolkit.IUnitOfWork.Commit">
            <summary>
            Saves pending changes to all registered contexts.
            </summary>
            <returns>The total number of objects committed.</returns>
        </member>
    </members>
</doc>
